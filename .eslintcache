[{"C:\\Users\\Jerry\\blowfish-interface\\src\\index.js":"1","C:\\Users\\Jerry\\blowfish-interface\\src\\reportWebVitals.js":"2","C:\\Users\\Jerry\\blowfish-interface\\src\\components\\App.js":"3","C:\\Users\\Jerry\\blowfish-interface\\src\\components\\canvasjs.react.js":"4","C:\\Users\\Jerry\\blowfish-interface\\src\\components\\canvasjs.min.js":"5","C:\\Users\\Jerry\\blowfish-interface\\src\\components\\Panel.js":"6","C:\\Users\\Jerry\\blowfish-interface\\src\\components\\PolicyGraph.js":"7","C:\\Users\\Jerry\\blowfish-interface\\src\\components\\Schema.js":"8"},{"size":553,"mtime":1606785820137,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":1152,"mtime":1610055314293,"results":"12","hashOfConfig":"10"},{"size":2080,"mtime":1608195814650,"results":"13","hashOfConfig":"10"},{"size":590816,"mtime":1608195906087,"results":"14","hashOfConfig":"10"},{"size":38821,"mtime":1612043427966,"results":"15","hashOfConfig":"10"},{"size":7541,"mtime":1611555210656,"results":"16","hashOfConfig":"10"},{"size":844,"mtime":1610251305128,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"s7d6vn",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Jerry\\blowfish-interface\\src\\index.js",[],["37","38"],"C:\\Users\\Jerry\\blowfish-interface\\src\\reportWebVitals.js",[],"C:\\Users\\Jerry\\blowfish-interface\\src\\components\\App.js",[],"C:\\Users\\Jerry\\blowfish-interface\\src\\components\\canvasjs.react.js",["39"],"ï»¿/*\r\nCanvasJS React Charts - https://canvasjs.com/\r\nCopyright 2020 fenopix\r\n\r\n--------------------- License Information --------------------\r\nCanvasJS is a commercial product which requires purchase of license. Without a commercial license you can use it for evaluation purposes for upto 30 days. Please refer to the following link for further details.\r\nhttps://canvasjs.com/license/\r\n\r\n*/\r\nvar React = require('react');\r\nvar CanvasJS = require('./canvasjs.min');\r\nCanvasJS = CanvasJS.Chart ? CanvasJS : window.CanvasJS;\r\n\r\nclass CanvasJSChart extends React.Component {\r\n\tstatic _cjsContainerId = 0\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.options = props.options ? props.options : {};\r\n\t\tthis.containerProps = props.containerProps ? props.containerProps : { width: \"100%\", position: \"relative\" };\r\n\t\tthis.containerProps.height = props.containerProps && props.containerProps.height ? props.containerProps.height : this.options.height ? this.options.height + \"px\" : \"400px\";\r\n\t\tthis.chartContainerId = \"canvasjs-react-chart-container-\" + CanvasJSChart._cjsContainerId++;\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\t//Create Chart and Render\t\t\r\n\t\tthis.chart = new CanvasJS.Chart(this.chartContainerId, this.options);\r\n\t\tthis.chart.render();\r\n\r\n\t\tif (this.props.onRef)\r\n\t\t\tthis.props.onRef(this.chart);\r\n\t}\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\t//Check if Chart-options has changed and determine if component has to be updated\r\n\t\treturn !(nextProps.options === this.options);\r\n\t}\r\n\tcomponentDidUpdate() {\r\n\t\t//Update Chart Options & Render\r\n\t\tthis.chart.options = this.props.options;\r\n\t\tthis.chart.render();\r\n\t}\r\n\tcomponentWillUnmount() {\r\n\t\t//Destroy chart and remove reference\r\n\t\tthis.chart.destroy();\r\n\t\tif (this.props.onRef)\r\n\t\t\tthis.props.onRef(undefined);\r\n\t}\r\n\trender() {\r\n\t\t//return React.createElement('div', { id: this.chartContainerId, style: this.containerProps });\t\t\r\n\t\treturn <div id={this.chartContainerId} style={this.containerProps} />\r\n\t}\r\n}\r\n\r\nvar CanvasJSReact = {\r\n\tCanvasJSChart: CanvasJSChart,\r\n\tCanvasJS: CanvasJS\r\n};\r\n\r\nexport default CanvasJSReact;","C:\\Users\\Jerry\\blowfish-interface\\src\\components\\canvasjs.min.js",[],"C:\\Users\\Jerry\\blowfish-interface\\src\\components\\Panel.js",[],"C:\\Users\\Jerry\\blowfish-interface\\src\\components\\PolicyGraph.js",["40"],"import React, { Component } from 'react'\r\nimport CytoscapeComponent from 'react-cytoscapejs'\r\n\r\n// For a given (categorical) policy, visualize the policy graph for it\r\n\r\nclass PolicyGraph extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    state = {\r\n        w: 0,\r\n        h: 0\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({\r\n            w: window.innerWidth,\r\n            h: window.innerHeight\r\n        })\r\n        this.setUpListeners()\r\n    }\r\n\r\n    setUpListeners = () => {\r\n        this.cy.on('click', 'node', (event) => {\r\n            console.log(event.target)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let x1 = 30;\r\n        let y1 = 30;\r\n        let w = 480;\r\n        let h = 280;\r\n        let nodesEdges = []\r\n        // this is the case when we are dealing with categorical data\r\n        if (this.props.attrType === 'categorical') {\r\n            // assign values inside the domain to be nodes\r\n            for (let i = 0; i < this.props.attributeDomain.length; ++i) {\r\n                // console.log(this.props.attributeDomain[i])\r\n                let curNode = {\r\n                    data: { id: this.props.attributeDomain[i].value, label: this.props.attributeDomain[i].label },\r\n                    position: { x: 290, y: 50 },\r\n                    style: {\r\n                        'background-color': '#d4d4d4',\r\n                        \"text-valign\": \"center\",\r\n                        \"text-halign\": \"center\"\r\n                    }\r\n                }\r\n                nodesEdges = nodesEdges.concat(curNode)\r\n            }\r\n            // assign values in the policy set to be edges\r\n            // Note that this will be a clique in the contained set\r\n            // console.log(this.props.sensitiveSet)\r\n            if (this.props.sensitiveSet !== null) {\r\n                for (let i = 0; i < this.props.sensitiveSet.length; ++i) {\r\n                    for (let j = i + 1; j < this.props.sensitiveSet.length; ++j) {\r\n                        let curEdge = {\r\n                            data: { source: this.props.sensitiveSet[i].value, target: this.props.sensitiveSet[j].value },\r\n                            style: {\r\n                                'line-color': '#000000',\r\n                                'width': 1\r\n                            }\r\n                        }\r\n                        nodesEdges = nodesEdges.concat(curEdge)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // when attribute type is numerical\r\n            // console.log(this.props.attributeDomain)\r\n            // console.log(this.props.attrThreshold)\r\n            let displayNodes = 12;\r\n            let lowerBound = this.props.attributeDomain.domain[0];\r\n            let upperBound = this.props.attributeDomain.domain[1];\r\n            let attrName = this.props.attributeDomain.attrName;\r\n            let defaultGranularity = Math.round((upperBound - lowerBound) / displayNodes)\r\n            // console.log(defaultGranularity)\r\n            let previousBound = lowerBound + defaultGranularity; // the lower bound for each node in the policy graph\r\n            // set the default granularity to display here\r\n            // add nodes to the graph\r\n            for (let i = 0; i < displayNodes; ++i) {\r\n                let curNode = null;\r\n                if (i === 0) {\r\n                    curNode = {\r\n                        data: {\r\n                            // id cannot be a tuple\r\n                            id: i,\r\n                            label: attrName + \"<\" + previousBound\r\n                        },\r\n                        position: { x: 290, y: 50 },\r\n                        style: {\r\n                            'background-color': '#d4d4d4',\r\n                            \"text-valign\": \"center\",\r\n                            \"text-halign\": \"center\"\r\n                        }\r\n                    }\r\n                } else if (i === displayNodes - 1) {\r\n                    curNode = {\r\n                        data: {\r\n                            id: i,\r\n                            label: previousBound + \"<=\" + attrName\r\n                        },\r\n                        position: { x: 290, y: 50 },\r\n                        style: {\r\n                            'background-color': '#d4d4d4',\r\n                            \"text-valign\": \"center\",\r\n                            \"text-halign\": \"center\"\r\n                        }\r\n                    }\r\n                } else {\r\n                    let tempUpper = previousBound + defaultGranularity;\r\n                    curNode = {\r\n                        data: {\r\n                            id: i,\r\n                            label: previousBound + \"<=\" + attrName + \"<\" + tempUpper\r\n                        },\r\n                        position: { x: 290, y: 50 },\r\n                        style: {\r\n                            'background-color': '#d4d4d4',\r\n                            \"text-valign\": \"center\",\r\n                            \"text-halign\": \"center\"\r\n                        }\r\n                    }\r\n                }\r\n                nodesEdges = nodesEdges.concat(curNode)\r\n                if (i !== 0) {\r\n                    previousBound += defaultGranularity;\r\n                }\r\n            }\r\n\r\n            // note that nodes are sorted\r\n            let threshold = 0;\r\n            if (this.props.attrThreshold !== null) {\r\n                threshold = this.props.attrThreshold.value;\r\n            }\r\n            let degree = Math.ceil(threshold / defaultGranularity);\r\n            // console.log(degree)\r\n            for (let i = 0; i < displayNodes; ++i) {\r\n                // draw edges between nodes based on thresholds\r\n                for (let j = i + 1; j < displayNodes; ++j) {\r\n                    if (j - i <= degree) {\r\n                        let curEdge = {\r\n                            data: { source: i, target: j },\r\n                            style: {\r\n                                'line-color': '#000000',\r\n                                'width': 1\r\n                            }\r\n                        }\r\n                        nodesEdges = nodesEdges.concat(curEdge)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const layout = {\r\n            name: 'circle',\r\n\r\n            fit: false, // whether to fit to viewport\r\n            padding: 30, // fit padding\r\n            boundingBox: { x1, y1, w, h }, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\r\n            animate: true, // whether to transition the node positions\r\n            animationDuration: 500, // duration of animation in ms if enabled\r\n            animationEasing: undefined, // easing of animation if enabled\r\n            radius: 150,\r\n            animateFilter: function (node, i) { return true; },\r\n            ready: undefined, // callback on layoutready\r\n            stop: undefined, // callback on layoutstop\r\n            nodeSeparation: 3,\r\n            transform: function (node, position) { return position; } // transform a given node position. Useful for changing flow direction in discrete layouts \r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <CytoscapeComponent\r\n                    elements={nodesEdges}\r\n                    style={{ width: this.state.w, height: this.state.h }}\r\n                    cy={(cy) => { this.cy = cy }}\r\n                    layout={layout}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PolicyGraph;","C:\\Users\\Jerry\\blowfish-interface\\src\\components\\Schema.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":1,"column":1,"nodeType":"47","messageId":"48","fix":"49"},{"ruleId":"50","severity":1,"message":"51","line":7,"column":5,"nodeType":"52","messageId":"53","endLine":9,"endColumn":6},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"56","text":"57"},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation",[-1,0],""]